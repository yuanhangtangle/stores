set nocompatible
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
filetype plugin indent on 
set relativenumber
set background=dark
set formatoptions-=t
set nohlsearch

" nvim-tree settings
" disable netwr as suggested by nvim-tree
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
set termguicolors
nnoremap <C-n> :NvimTreeToggle<cr>

" line
nnoremap <space>o o<Esc>
nnoremap <space>O O<Esc>

" windows scroll
nnoremap <space>m zz
nnoremap <space><space> <C-d>
nnoremap <space>j <C-d>
nnoremap <space>k <C-u>
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>

" search repeat
nnoremap t ;

" vimtex
let g:vimtex_imaps_enabled = 0
let g:vimtex_view_method = 'skim'
let g:vimtex_view_skim_sync = 1
let g:vimtex_view_skim_activate = 1
let g:vimtex_syntax_conceal_disable = 0

" mark and jump
nmap ma mA
nmap ms mS
nmap md mD
nmap 'a 'A
nmap 's 'S
nmap 'd 'D

" define Q as q to quit editor
:command Q q
:command Qa qa
:command QA qa
:command W w


"vertical windows size adjust
nmap <C-w><C-j> :vertical resize -20<cr>
nmap <C-w><C-k> :vertical resize +20<cr>
 
"terminal settings
" use Esc to escape from terminal mode
tnoremap <Esc> <C-\><C-n>
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l
inoremap <C-h> <C-\><C-N><C-w>h
inoremap <C-j> <C-\><C-N><C-w>j
inoremap <C-k> <C-\><C-N><C-w>k
inoremap <C-l> <C-\><C-N><C-w>l
nnoremap <leader>t :vs term://zsh<cr>


" window movement
nnoremap <Space>n <C-w><C-p>

" fold
nnoremap <space>i zi
 
" beginning or end of sentence
nnoremap 0 ^
vnoremap 0 ^
nnoremap ^ 0
vnoremap ^ 0
nmap - g_
vmap - g_

" set python3 path for nvim
let g:python3_host_prog = '/opt/homebrew/bin/python3'


" markdown
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1

" sftp shortcuts
nmap <leader>up :UpFile<cr>
nmap <leader>uf :UpFolder<cr>
nmap <leader>dl :DlFile<cr>
nmap <leader>df :DlFolder<cr>

" vim-slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}
let g:slime_python_ipython = 1

" nowrap to keep code format
set nowrap

" indentLine
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" fzf
map <C-p> :Files ./<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit'}

" open ~/.vimrc file
map <leader>v :tabe ~/.config/nvim/init.vim<CR>

" coc settings begin
set updatetime=300
set signcolumn=yes
set ic
let python_highlight_all = 1


"coc-snippet
imap <C-l> <Plug>(coc-snippets-expand)
vmap <C-j> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'
imap <C-j> <Plug>(coc-snippets-expand-jump)
xmap <leader>x  <Plug>(coc-convert-snippet)

" coc.nvim
 "use <tab> to complete
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" 函数定义跳转
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" 高亮当前函数
autocmd CursorHold * silent call CocActionAsync('highlight')

" 重命名
nmap <leader>rn <Plug>(coc-rename)

" 格式化
map <leader>f :call CocAction('format')<cr>

" 显示可用的代码操作
nmap <leader>ac  <Plug>(coc-codeaction-cursor)

" 进行可用的快速修复
"nmap <leader>f  <Plug>(coc-fix-current)

" 移动到上一个/下一个诊断处
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" coc setting  end 

" tarbar settings
map <C-b> :TagbarToggle<cr>
let g:tagbar_ctags_bin = 'ctags'                    
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
set backspace=2


" nerdtree 设置
"map <C-n> :NERDTreeToggle<CR>
"let NERDTreeShowHidden = 1 

" tab navigation
" go to last active tab
if !exists('g:lasttab')
  let g:lasttab = 1
endif
nmap <space>l :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

nnoremap <space>1 :tabn 1<cr>
nnoremap <space>2 :tabn 2<cr>
nnoremap <space>3 :tabn 3<cr>
nnoremap <space>4 :tabn 4<cr>
nnoremap <space>5 :tabn 5<cr>
nnoremap <space>6 :tabn 6<cr>
nnoremap <space>7 :tabn 7<cr>
nnoremap <space>8 :tabn 8<cr>
nnoremap <space>9 :tabn 9<cr>
nnoremap <leader>] :tabn<CR>
nnoremap <leader>[ :tabp<CR>

"rainbow_parentheses 设置
"let g:rbpt_colorpairs = [
	"\ ['brown',       'RoyalBlue3'],
	"\ ['Darkblue',    'SeaGreen3'],
	"\ ['darkgray',    'DarkOrchid3'],
	"\ ['darkgreen',   'firebrick3'],
	"\ ['darkcyan',    'RoyalBlue3'],
	"\ ['darkred',     'SeaGreen3'],
	"\ ['darkmagenta', 'DarkOrchid3'],
	"\ ['brown',       'firebrick3'],
	"\ ['gray',        'RoyalBlue3'],
	"\ ['darkmagenta', 'DarkOrchid3'],
	"\ ['Darkblue',    'firebrick3'],
	"\ ['darkgreen',   'RoyalBlue3'],
	"\ ['darkcyan',    'SeaGreen3'],
	"\ ['darkred',     'DarkOrchid3'],
	"\ ['red',         'firebrick3'],
	"\ ]
"let g:rbpt_max = 16
"let g:rbpt_loadcmd_toggle = 0
"au VimEnter * RainbowParenthesesToggle
"au Syntax * RainbowParenthesesLoadRound
"au Syntax * RainbowParenthesesLoadSquare
"au Syntax * RainbowParenthesesLoadBraces

" python 设置
au Filetype python set tabstop=4
au Filetype python set softtabstop=4
au Filetype python set shiftwidth=4
"au Filetype python set textwidth=79
au Filetype python set expandtab
au Filetype python set autoindent
au Filetype python set fileformat=unix
au Filetype python set foldmethod=indent
au Filetype python set foldlevel=99
au Filetype python map <F5> :!python3 %<CR>

" C settings
au Filetype c set foldmethod=indent
au Filetype c set foldlevel=99
au Filetype c set tabstop=2
au Filetype c set softtabstop=2
au Filetype c set shiftwidth=2
au Filetype c map <F5> :w<CR>:!gcc -g % -o a.out<CR>:!./a.out<CR>
au Filetype c map <F4> :w<CR>:!gcc -g % -o a.out<CR>



"插件设置
call plug#begin('~/.vim/plugged')
    Plug 'nvim-tree/nvim-tree.lua'
    Plug 'nvim-tree/nvim-web-devicons'
    Plug 'MunifTanjim/nui.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'jackMort/ChatGPT.nvim'
    Plug 'lervag/vimtex'
    Plug 'honza/vim-snippets'
    Plug 'bronson/vim-visual-star-search'
    Plug 'yuanhang/vim-sftp'
    Plug 'jpalardy/vim-slime'
    Plug 'godlygeek/tabular'
    Plug 'preservim/vim-markdown'
    Plug 'morhetz/gruvbox'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'preservim/tagbar'
    "Plug 'preservim/nerdtree'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    "Plug 'kien/rainbow_parentheses.vim'
    Plug 'vim-airline/vim-airline'
    Plug 'jiangmiao/auto-pairs'
    Plug 'tpope/vim-surround'
    Plug 'Yggdroot/indentLine'
    Plug 'tmhedberg/SimpylFold'
    Plug 'preservim/nerdcommenter'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'neoclide/coc-snippets'
call plug#end()


colorscheme gruvbox

lua require('chatgpt').setup()
lua require("nvim-tree").setup()
lua << EOF
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" (the five listed parsers should always be installed)
  ensure_installed = { "c", "lua", "vim", "vimdoc" , "markdown", "yaml"},

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = false,

  highlight = {
    enable = true,

    -- list of language servers that will be disabled
    disable = {},
    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    additional_vim_regex_highlighting = false,
  },
}
EOF
